#!/usr/bin/env ruby

require 'json'

require_relative 'whale_tlg0'
require_relative '../story_utils/story'

def locate_file(name)
  @arc_dirs.each { |path|
    fn = "#{@asset_dir}/#{path}/#{name}"
    return [fn, path] if File.exists?(fn)
  }
  [nil, nil]
end

def read_tags(tlg0)
  r = {}
  tlg0.tags.pairs.each { |tag|
    k = tag.key.value
    v = if tag.value_num
          [tag.value_num.v21, tag.value_num.v22]
        else
          tag.value_str.str
        end
    r[k] = v
  }
  return r
end

def tlg2png(fn)
  fn.gsub(/\.tlg$/, '.png')
end

def get_img_size(fn)
  dims = `identify -format '%w %h' '#{fn}'`
  raise "identify failed on #{fn.inspect}" unless $?.exitstatus == 0
  dims.split(/ /).map { |x| x.to_i }
end

# name = "bg/BG_001_07_0.tlg"
# fn = "extracted/noratoto/arc0/bg/BG_001_07_0.tlg"
# path = "arc0"
def process_tlg(name, fn, path)
  begin
    p fn
    tlg0 = WhaleTlg0.from_file(fn)
  rescue Kaitai::Struct::Stream::UnexpectedDataError
    # not a TLG0 file, just store sizes
    png_fn = "#{path}/#{tlg2png(name)}"
    body_w, body_h = get_img_size("#{@asset_dir2}/#{png_fn}")

    @imgs[name.gsub(/\.tlg$/, '')] = {
      'ox' => body_w / 2,
      'oy' => body_h / 2,
      'mx' => body_w,
      'my' => body_h,
      'imgs' => [
        {'fn' => png_fn, 'px' => 0, 'py' => 0},
      ],
    }

    return
  end
  tags = read_tags(tlg0)

  cur_dir = File.dirname(name)

  img = [
    {'fn' => "#{path}/#{cur_dir}/#{tlg2png(tags[:key_filename])}", 'px' => 0, 'py' => 0},
    {'fn' => "#{path}/#{tlg2png(name)}", 'px' => tags[:key_ofs_x][0], 'py' => tags[:key_ofs_y][0]},
#    {'fn' => "arc0/sys/cursor0.png", 'px' => tags[:key_ofs_x][1], 'py' => tags[:key_ofs_y][1]},
  ]

  # For files that reference nothing
  return if tags[:key_filename].empty?

  body_fn = "#{@asset_dir2}/#{img[0]['fn']}"

  if not File.exists?(body_fn)
    warn "file #{body_fn.inspect} not found, referenced from #{name.inspect}"
    return
  end

  body_w, body_h = get_img_size(body_fn)

  @imgs[name.gsub(/\.tlg$/, '')] = {
    'ox' => body_w / 2,
    'oy' => body_h / 2,
    'mx' => body_w,
    'my' => body_h,
    'imgs' => img,
  }
end

if ARGV.size != 5
  puts "Usage: tlg0-generate-imgs <file-list> <asset-dir> <asset-dir2> <arc-dirs> <imgs-json>"
  exit 0
end

file_list, @asset_dir, @asset_dir2, @arc_dirs, out_imgs = ARGV

@arc_dirs = @arc_dirs.split(/,/)

@imgs = {}

File.open(file_list, 'r') { |f|
  f.each_line { |l|
    l.chomp!
    next unless l =~ /\.tlg$/
    fn, path = locate_file(l)
    if fn.nil?
      warn "unable to locale #{l.inspect}"
    else
      process_tlg(l, fn, path)
    end
  }
}

File.open(out_imgs, 'w') { |f|
  f.write(JSON.pretty_generate(@imgs))
}
